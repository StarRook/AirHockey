<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>IceHockey</title>
    <link href="https://fonts.googleapis.com/css?family=Press+Start+2P" rel="stylesheet">
    <link rel="stylesheet" href="../public/main.css">
</head>
<body>
<style>
    html, body {
        cursor: none;
    }
</style>
<div id="game">
    <canvas id="canvas" style="border: 1px solid black;" width="1800" height="900"></canvas>
    <audio style="display: none;"><source src="" type="audio/mpeg"></audio>
</div>
<div id="lobby">
    <h1>Welcome to AirHockey</h1>
    <h3>Lobby</h3>
    <div style="width: 25%">
        <h4>Paikalla olevat pelaajat</h4>
        <ul id="players">

        </ul>
    </div>
    <div style="width: 75%">
        <h4>Avoimet pelit</h4>
        <ul id="games">

        </ul>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>
  $(function () {

    // Näiden muuttaminen vaatisi myös server puolen muutoksia. Tai sitten kaikki nää pitää saada serveriltä jotta serverillä voidaan laskea esim pelaajan rajoittaminen keskiviivaan
    const canvasWidth = 1800;
    const canvasHeight = 900;
    const playerRadius = 35;

    /* FUNCTIONS START */

    const drawScore = (player1, player2) => {

      const size = (canvasWidth / 30);

      ctx.font =  size + 'px Arial';
      ctx.fillText(player1, canvasWidth / 2 - 100, size);
      ctx.fillText(player2, canvasWidth / 2 + 60, size);
    };

    const drawLine = (color, x1, y1, x2, y2) => {
      ctx.beginPath();
      ctx.strokeStyle = color;
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.stroke();
    };

    const drawArc = (color, x, y, r, fill) => {
      ctx.beginPath();
      if (fill) {
        ctx.fillStyle = color;
      } else {
        ctx.strokeStyle = color;
      }
      ctx.arc(x, y, r, 0, 2 * Math.PI);
      ctx.closePath();
      if (fill) {
        ctx.fill();
      } else {
        ctx.stroke();
      }
    };

    const drawLinesToField = () => {

      // LINES

      //        color       X1                                      Y1  X2                                      Y2
      drawLine( '#9d0000',  canvasWidth / 2,                        0,  canvasHeight,                           canvasHeight);
      drawLine( '#00009d',  canvasWidth / 2 - canvasWidth * 0.2,    0,  canvasWidth / 2 - canvasWidth * 0.2,    canvasHeight);
      drawLine( '#00009d',  canvasWidth / 2 + canvasWidth * 0.2,    0,  canvasWidth / 2 + canvasWidth * 0.2,    canvasHeight);

      // ARCS

      //        color       X                   Y                                       R                   Fill
      drawArc(  '#9d0000',  canvasWidth / 2,    canvasHeight / 2,                       canvasWidth / 36,   false);
      drawArc(  '#9d0000',  canvasWidth / 2,    canvasHeight / 2,                       canvasWidth / 150,  true);
      drawArc(  '#4a81f5',  canvasWidth,        canvasHeight / 2,                       canvasHeight / 9,   true);
      drawArc(  '#4a81f5',  0,                  canvasHeight / 2,                       canvasHeight / 9,   true);
      drawArc(  '#cf2729',  0,                  canvasHeight / 2 - canvasHeight / 9,    5,                  true);
      drawArc(  '#cf2729',  0,                  canvasHeight / 2 + canvasHeight / 9,    5,                  true);
      drawArc(  '#cf2729',  canvasWidth,        canvasHeight / 2 - canvasHeight / 9,    5,                  true);
      drawArc(  '#cf2729',  canvasWidth,        canvasHeight / 2 + canvasHeight / 9,    5,                  true);
    };

    /* FUNCTIONS END */

    const socket = io();

    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext("2d");

    canvas.addEventListener('mousemove', (event) => {
      socket.emit('move', [event.clientX, event.clientY]);
    });

    socket.on('update', (data) => {

      ctx.clearRect(0, 0, canvasWidth, canvasHeight);

      drawLinesToField();

      for (const player of data.players) {

        let fillStyle = '#0c2984';

        if (player.no === 1) {
          fillStyle = '#ad222d';
        }

        drawArc(fillStyle, player.x, player.y, playerRadius, true);
      }

      const puck = data.puck;

      drawArc(puck.color, puck.x, puck.y, puck.r, true);

      drawScore(data.score.player1, data.score.player2);

    });
  });
</script>
</body>
</html>